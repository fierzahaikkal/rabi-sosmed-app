// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  comments      Comments[]
  likes         Likes[]
  posts         Posts[]
  replies       Replies[]
  topics        Topics[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Comments {
  id         String    @id @default(cuid())
  userId     String    @map("user_id")
  postId     String    @map("post_id")
  content    String    @db.Text
  created_at DateTime  @default(now()) @db.Timestamp(0)
  user       User      @relation(fields: [userId], references: [id])
  posts      Posts     @relation(fields: [postId], references: [id])
  replies    Replies[]

  @@index([postId], map: "postId")
  @@index([userId], map: "userId")
}

model Likes {
  id         String   @id @default(cuid())
  userId     String   @map("user_id")
  postId     String   @map("post_id")
  created_at DateTime @default(now()) @db.Timestamp(0)
  user       User     @relation(fields: [userId], references: [id])
  posts      Posts    @relation(fields: [postId], references: [id])

  @@index([postId], map: "postId")
  @@index([userId], map: "userId")
}

model Posts {
  id         String     @id @default(cuid())
  userId     String     @map("user_id")
  content    String     @db.Text
  image_url  String?    @db.VarChar(255)
  topicId    String     @map("topic_id")
  created_at DateTime   @default(now()) @db.Timestamp(0)
  updated_at DateTime   @default(now()) @db.Timestamp(0)
  comments   Comments[]
  likes      Likes[]
  user       User       @relation(fields: [userId], references: [id])
  topics     Topics?    @relation(fields: [topicId], references: [id])

  @@index([topicId], map: "topicId")
  @@index([userId], map: "userId")
}

model Replies {
  id         String   @id @default(cuid())
  userId     String   @map("user_id")
  commentId  String   @map("comment_id")
  content    String   @db.Text
  created_at DateTime @default(now()) @db.Timestamp(0)
  user       User     @relation(fields: [userId], references: [id])
  comments   Comments @relation(fields: [commentId], references: [id])

  @@index([commentId], map: "commentId")
  @@index([userId], map: "userId")
}

model Topics {
  id     String  @id @default(cuid())
  name   String  @unique(map: "name") @db.VarChar(255)
  posts  Posts[]
  User   User?   @relation(fields: [userId], references: [id])
  userId String?
}

// model user {
//   id                Int        @id @default(autoincrement())
//   username          String     @unique(map: "username") @db.VarChar(255)
//   email             String     @unique(map: "email") @db.VarChar(255)
//   password_hash     String     @db.VarChar(255)
//   profile_image_url String?    @db.VarChar(255)
//   created_at        DateTime   @default(now()) @db.Timestamp(0)
//   updated_at        DateTime   @default(now()) @db.Timestamp(0)
// }
